syntax = "proto3";

package crispy.dummy;
option go_package = "/dummy";

//import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Dummy public API";
    version: "2.0";
    contact: {
      name: "Pavel Fiskovich";
      url: "https://khannz.medium.com/about";
    };
  };
  schemes: [HTTP];
  consumes: "application/json";
  produces: "application/json";
};

//announce сервис
service AnnounceService {
  //add Ip from ino net interface
  rpc AddIP(AddIpRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v2/announce/add_ip"
      body: "*"
    };
  }

  //remove Ip from net interface
  rpc RemoveIP(RemoveIpRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v2/announce/remove_ip"
      body: "*"
    };
  }

  //get current state
  rpc GetState(google.protobuf.Empty) returns (GetStateResponse) {
    option (google.api.http) = {
      get: "/v2/announce/state"
    };
  }
}

//AddIpRequest запрос на добавление Ip в net-интерфейс
message AddIpRequest {
  //IP адрес
  string ip = 1;
}

//RemoveIpRequest запрос на удаление Ip из net-интерфейса
message RemoveIpRequest {
  //IP адрес
  string ip = 1;
}

//GetStateResponse запрос на получение списка адресов из интефейса
message GetStateResponse {
  repeated string services = 1;
}







